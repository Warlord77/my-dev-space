sudo: true
dist: trusty
addons:
  apt:
    sources:
     - google-chrome
    packages:
     - google-chrome-stable

language: node_js
node_js: 'node'

install:
- npm install
- npm install danger -g

cache:
  directories:
  - "node_modules"

services:
  - docker

env:
  global:
    - DOCKER_COMPOSE_VERSION=1.14.0
    - COMMIT=${TRAVIS_COMMIT::8}
    - MAIN_REPO=ssh://git@github.com/apoclyps/my-dev-space.git

    - USERS=my-dev-space-users
    - USERS_REPO=${MAIN_REPO}#${TRAVIS_BRANCH}:services/users
    - USERS_DIR=services/users

    - USERS_DB=my-dev-space-users_db
    - USERS_DB_REPO=${MAIN_REPO}#${TRAVIS_BRANCH}:services/users/project/db
    - USERS_DB_DIR=services/users/project/db

    - EVENTS=my-dev-space-events
    - EVENTS_REPO=${MAIN_REPO}#${TRAVIS_BRANCH}:services/events
    - EVENTS_DIR=services/events

    - EVENTS_DB=my-dev-space-events_db
    - EVENTS_DB_REPO=${MAIN_REPO}#${TRAVIS_BRANCH}:services/events/project/db
    - EVENTS_DB_DIR=services/events/project/db

    - CLIENT=my-dev-space-client
    - CLIENT_REPO=${MAIN_REPO}#${TRAVIS_BRANCH}:services/client
    - CLIENT_DIR=services/client

    - SWAGGER=my-dev-space-swagger
    - SWAGGER_REPO=${MAIN_REPO}#${TRAVIS_BRANCH}:services/swagger
    - SWAGGER_DIR=services/swagger

jobs:
  include:
    - stage: build docker-compose
      script:
      - sudo rm /usr/local/bin/docker-compose
      - curl -L https://github.com/docker/ compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
      - chmod +x docker-compose
      - sudo mv docker-compose /usr/local/bin
    - stage: test
      script:
      - export TEST_URL=http://127.0.0.1
      - export REACT_APP_USERS_SERVICE_URL=http://127.0.0.1
      - export REACT_APP_EVENTS_SERVICE_URL=http://127.0.0.1
      - export SECRET_KEY=my_precious
      - export DISPLAY=:99.0
      - export DOCKER_ENV=$(if [ "$TRAVIS_BRANCH" == "production" ]; then echo "prod"; else echo "stage"; fi)
      - sh -e /etc/init.d/xvfb start
      - sleep 3
      - docker-compose -f docker-compose-stage.yml up --build -d
      - bash test.sh $DOCKER_ENV
    - stage: staging
      script:
      - docker-compose -f docker-compose-stage.yml down
    - stage: deploy
      script:
      - bash ./docker-push.sh
      - bash ./docker-deploy-stage.sh
      - bash ./docker-deploy-prod.sh